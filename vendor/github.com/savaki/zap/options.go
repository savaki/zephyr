// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package zap

// Option is used to set options for the logger.
type Option interface {
	apply(*jsonLogger) error
}

// optionFunc wraps a func so it satisfies the Option interface.
type optionFunc func(*jsonLogger) error

func (f optionFunc) apply(jl *jsonLogger) error {
	return f(jl)
}

// This allows any Level to be used as an option.
func (l Level) apply(jl *jsonLogger) error {
	jl.SetLevel(l)
	return nil
}

// Fields sets the initial fields for the logger.
func Fields(fields ...Field) Option {
	return optionFunc(func(jl *jsonLogger) error {
		return jl.enc.AddFields(fields)
	})
}

// Output sets the destination for the logger's output.
func Output(w WriteSyncer) Option {
	return optionFunc(func(jl *jsonLogger) error {
		jl.w = w
		return nil
	})
}

// ErrorOutput sets the destination for errors generated by the logger.
func ErrorOutput(w WriteSyncer) Option {
	return optionFunc(func(jl *jsonLogger) error {
		jl.errW = w
		return nil
	})
}

func Append(appendFunc AppendFunc) Option {
	return optionFunc(func(jl *jsonLogger) error {
		jl.appendFunc = appendFunc
		return nil
	})
}
